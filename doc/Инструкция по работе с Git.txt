ПОРЯДОК РАБОТЫ С GIT

=====================================================================================================================
ЗОЛОТОЕ ПРАВИЛО
"Одна карточка Trello -> Одна ветка -> Один коммит -> Один pull request"

(Если реализация карточки получается очень большая, то имеет смысл разбить ее логически
на несколько частей - завести несколько карточек и создать несколько веток).

=====================================================================================================================

ПРАВИЛА ИМЕНОВАНИЯ ВЕТОК GIT
1. Ветка функциональности (feature)
    - Описание: ветка новой функциональности
    - Стуктура имени: feature-<номер задачи в Trello>-<Краткая_суть_не_более_20_символов>
    - Пример: feature-mp-012-Db_structure
    - Порождается от: develop
    - Вливается в: develop

2. Ветка исправлений (fix)
    - Описание: ветка исправления бага
    - Структура имени: fix-<номер задачи в Trello>-<Краткая_суть_не_более_20_символов>
    - Пример: fix-mp-012-User_entity_presentation
    - Порождается от: master
    - Вливается в: master и develop

=====================================================================================================================

СООБЩЕНИЕ КОММИТА GIT
номер_задачи_Trello: Суть изменений подробно

Пример: mp-001: Создан и настроен проект

=====================================================================================================================

ПРОЦЕДУРА РАБОТЫ

1. СОЗДАНИЕ СОБСТВЕННОЙ ВЕТКИ
    1.1. Синхронизируем ветку develop (см. п. 8)
    1.2. Переходим в ветку develop (git checkout develop). Проверить в какой вы сейчас ветке (git branch)
    1.3. Создаем ветку под задачу в Trello (git checkout -b feature-mp-001-Initial_settings). Имя присваиваем исходя
        из правил (ПРАВИЛА ИМЕНОВАНИЯ ВЕТОК GIT).
    1.4. Вы в собственной ветке feature-mp-001-Initial_settings и можно начинать разработку.
    1.5. Переходим в п. 2
2. ПЕРВИЧНЫЙ КОММИТ (НОВЫЙ КОММИТ)
    2.1. Перед коммитом надо сделать себе ветку (см. п. 1)
    2.2. Конечно, сначала надо запилить какой-нибудь код)))
    2.3. Добавляем все сделанные изменения в индекс (git add .)
    2.4. Коммит первичный (git commit -m "mp-001: Создан и настроен проект")
        (п. 2.2 и 2.3 можно заменить единой командой (git commit -am "mp-001: Создан и настроен проект")
    2.5. Если надо перезаписать коммит, то переходим к п. 3
    2.6. Переходим к п. 4.
3. ИЗМЕНЕНИЕ ПРЕДЫДУЩЕГО КОММИТА
    3.1. Перед изменением предыдущего коммита он должен существовать (см. п. 2)
    3.2. Добавляем все сделанные изменения в индекс (git add .)
    3.3. Коммитим с перезаписью (git commit --amend -m "mp-001: Создан и настроен проект. Добавлена структура Maven")
    3.4. Если надо перезаписать удаленный репо, то переходим к п. 5
    3.5. Если в удаленный репо ничего не отправляли, то переходим к п. 4.
    3.6. Если надо перезаписать удаленный репо, то переходим в п. 5.
4. ПЕРВИЧНАЯ ОТПРАВКА В УДАЛЕННЫЙ РЕПОЗИТОРИЙ
    4.1. Перед отправкой надо сделать коммит(-ы) (см. п. 2 и п. 3)
    4.2. Отправляем из локального в удаленный репо (git push origin feature-mp-001-Initial_settings)
    4.3. Если надо перезаписать удаленный репо, то переходим к п. 5
    4.4. Переходим к п. 9.
5. ПЕРЕЗАПИСЬ УДАЛЕННОГО РЕПОЗИТОРИЯ
    5.1. Перед изменением удаленного репо надо, чтобы там уже что-то было (см. п. 4)
    5.2. Перезаписываем удаленный репо (git push --force origin feature-mp-001-Initial_settings).
    5.3. Если сделать force в пустой репозиторий, то он отработает как в п. 4.
    5.4. Переходим к п. 9.
6. ПРОСМОТР ИЗМЕНЕНИЙ УДАЛЕННОГО РЕПО
    6.1. Узнать, что изменилось в ветках (git fetch --all)
7. СИНХРОНИЗАЦИЯ ИЗМЕНЕНИЙ ЛОКАЛЬНЫЙ РЕПО -> УДАЛЕННЫЙ РЕПО (см. п. 4 и п. 5)
8. СИНХРОНИЗАЦИЯ ИЗМЕНЕНИЙ УДАЛЕННЫЙ РЕПО -> ЛОКАЛЬНЫЙ РЕПО
    8.1. Узнать, есть ли изменения (см. п. 6), если их нет, то можно сразу переходить к п. 9.
    8.2. Зайти в девелоп (git checkout develop)
    8.3. Стянуть все с удаленного репо c перезаписью локального репо (git pull --all)
    8.4. Переходим к п. 9.
9. АКТУАЛИЗАЦИЯ РОДИТЕЛЯ ВАШЕЙ ВЕТКИ (REBASE)
    9.1. Синхронизируем develop (см. п. 8)
    9.2. Заходим в свою ветку feature-mp-001-Initial_settings (git checkout feature-mp-001-Initial_settings)
    9.3. Запускаем процесс изменения родителя для вашей ветки на develop (git rebase develop)
    9.4. Если возникли конфликты, то устраняем их и продолжаем rebase (см. п. 10)
    9.5. Если конфликтов не возникло, то радуемся и переходим к п. 12.
10. УСТРАНЕНИЕ КОНФЛИКТОВ
    10.1. устраняем конфликты (очень удобно через интерфейс IntelliJ IDEA на вкладке Version Control в нижней панели)
        (обратите внимание, что если возник конфликт, то git переходит в состояние "Rebasing" до моменты отмены (см. п. 11)
        или устранения конфликтов и продолжения слияния).
    10.2. добавляем в индекс все файлы (git add .)
    10.3. продолжаем процесс слияния (git rebase --continue)
11. ОТМЕНА ПРОЦЕДУРЫ REBASE
    11.1. Остановить процесс слияния можно командой (git rebase --abort)
12. ФИНАЛЬНОЕ
    12.1. В дереве Git родитель сменится на develop
    12.2. После завершения процедуры rebase ОБЯЗАТЕЛЬНО проверяете, что код РАБОЧИЙ и Ваш коммит НИЧЕГО не сломал.
    12.3. Если код не работает, то исправляете ошибки, вносите изменения в последний коммит (см. п. 3).
    12.4. Перезаписываем удаленный репозиторий (см. п. 5.)
    12.5. Проверяем, что изменений нет новых (см. п. 6), если есть, то выполняем с п. 9.
    12.5. Создаем pull request с ветки feature-mp-001-Initial_settings в ветку develop

=====================================================================================================================

ПОЛЕЗНЫЕ КОМАНДЫ GIT
Состояние
1. git log: Показать все сделанные коммиты в репозиторий
2. git log -n 1: Показать 1 сделанный коммит в репозиторий
3. git status: Показать все изменения в файлах рабочей директории
4. git branch: Показать все ветки локального репозитория
5. git remote: Показать все ветки удаленного репозитория
6. git checkout new_feature: Переключиться на ветку new_feature
7. git checkout -b shorten_title: Создать и переключиться на ветку shorten_title

Откат изменений
1. git reset --soft хэш: Перемещает указатель HEAD на коммит Хэш, все изменения в индексе и репозитории останутся
прежними.
2. git reset --mixed хэш: Откат изменений до коммита с хешем Хэш с приведением индекса в соответствие с репозиторием,
HEAD перемещается на коммит с хешем Хэш, все изменения в рабочей директории сохраняются.
3. git reset --hard хэш: Откат изменений до коммита с хешем Хэш, HEAD перемещается на коммит с хешем Хэш, все изменения
файлов в индексе и рабочей директории откатываются до коммита с хэшем Хэш (приводятся в соответствие с репозиторием),
откат до состояния репозитория БЕЗ СОХРАНЕНИЯ ИЗМЕНЕНИЙ

Копилка
1. git stash save "Сообщение": Добавить изменение в копилку
2. git stash list: Показать все изменения, добавленные в копилку
3. git stash show stash@{1}: Показать изменения в копилке под именем stash@{1}
4. git stash show -p stash@{1}: Показать подробные изменения в копилке под именем stash@{1}
5. git stash apply stash@{4}: Применить изменения stash@{4} из копилки в рабочую директорию, НЕ удаляя ее из копилки
6. git stash pop stash@{2}: Применить изменения stash@{2} из копилки в рабочую директорию, удаляя ее из копилки
7. git stash drop stash@{0}: Удалить из копилки изменение stash@{0}
8. git stash clear: Очистить копилку полностью

Настройка глобальной конфигурации (для красивого отображения в истории Git)
1. git config --global --list: Посмотреть настройки глобальной конфиграции Git
2. git config --global user.name "Ivan Petrov": Изменить/добавить имя пользователя Ivan Petrov
3. git config --global user.email "ivan@qmail.com": Изменить/добавить e-mail пользователя ivan@gmail.com

Как забрать конкретный коммит из другой ветки
git cherry-pick хэш: забрать в текущую ветку коммит с хешем Хэш
    После запуска процесса могут возникнуть конфликты, которые нужно устранить и
    - добавить изменений в индекс (git add .)
    - возобновить процесс командой (git cherry-pick --continue)
    - можно отменить командой (git cherry-pick --abort)

=====================================================================================================================