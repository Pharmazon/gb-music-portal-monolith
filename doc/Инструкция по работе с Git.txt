ПОРЯДОК РАБОТЫ С GIT
1. Тянем с удаленного репозитория все последние изменения по всем веткам (git pull --all)
2. Переходим в ветку develop (git checkout develop). Проверить в какой вы сейчас ветке (git branch)
3. Создаем ветку под задачу в Trello (git checkout -b название_ветки). Имя присваиваем исходя из правил (ниже).
4. Реализуем задачу
5. Коммитим в локальный репозиторий изменения:
5.1. добавляем все сделанные изменения в индекс (git add .)
5.2. коммит первично (git commit -m "<номер задачи в Trello>: Суть изменений")
(п. 5.1 и 5.2 можно заменить единой командой (git commit -am "<номер задачи в Trello>: Суть изменений"))
5.3. коммит повторно с изменением последнего без создания нового (git commit --amend -m "<номер задачи в Trello>: Суть изменений")
6. Отправляем изменения в удаленный репозиторий (git push origin название_ветки)
7. Тянем с удаленного репо все последние изменения по всем веткам (git pull --all или git fetch --all)
8. Находясь в своей ветке, запускаем процесс слияния с веткой develop (git rebase develop)
9. Если конфликтов не возникло, то слияние пройдет без ошибок
10. Если возникли конфликты, то:
10.1. устраняем конфликты (очень удобно через интерфейс IntelliJ IDEA на вкладке Version Control в нижней панели)
10.2. добавляем в индекс все исправленные файлы (git add .)
10.3. продолжаем процесс слияния (git rebase --continue)
10.4. при необходимости остановить процесс слияния можно командой (git rebase --abort)
11. Отправляем изменения в удаленный репозиторий (git push origin название_ветки)
12. Создаем pull request с вашей ветки в ветку develop

ПРАВИЛА ИМЕНОВАНИЯ ВЕТОК GIT
1. Ветка функциональности (feature)
- Описание: ветка новой функциональности
- Структура имени: feature-<номер задачи в Trello>-<Краткая_суть_не_более_20_символов>
- Пример имени: feature-mp0012-Db_structure
- Порождается от: develop
- Вливается в: develop

2. Ветка исправлений (fix)
- Описание: ветка исправления бага
- Структура имени: fix-<номер задачи в Trello>-<Краткая_суть_не_более_20_символов>
- Пример имени: fix-mp0012-User_entity_presentation
- Порождается от: master
- Вливается в: master и develop

ПРАВИЛА ИМЕНОВАНИЯ КОММИТОВ GIT
<номер задачи в Trello>: Суть изменений подробно

ПОЛЕЗНЫЕ КОМАНДЫ GIT
Состояние
1. git log: Показать все сделанные коммиты в репозиторий
2. git log -n 1: Показать 1 сделанный коммит в репозиторий
3. git status: Показать все изменения в файлах рабочей директории
4. git branch: Показать все ветки локального репозитория
5. git remote: Показать все ветки удаленного репозитория
6. git checkout new_feature: Переключиться на ветку new_feature
7. git checkout -b shorten_title: Создать и переключиться на ветку shorten_title

Откат изменений
1. git reset --soft хэш: Перемещает указатель HEAD на коммит Хэш (все изменения в индексе и репозитории останутся
прежними), все изменения файлов остаются прежними
2. git reset --mixed хэш: Откат изменений до коммита с хешем Хэш с приведением индекса в соответствие с репозиторием,
HEAD перемещается на коммит с хешем Хэш,  все изменения в рабочей директории сохраняются
3. git reset --hard хэш: Откат изменений до коммита с хешем Хэш, HEAD перемещается на коммит с хешем Хэш,  все изменения
файлов в индексе и рабочей директории откатываются до коммита с хэшем Хэш (приводятся в соответствие с репозиторием),
откат до состояния репозитория

Копилка
1. git stash save "Сообщение": Добавить изменение в копилку
2. git stash list: Показать все изменения, добавленные в копилку
3. git stash show stash@{1}: Показать изменения в копилке под именем stash@{1}
4. git stash show -p stash@{1}: Показать подробные изменения в копилке под именем stash@{1}
5. git stash apply stash@{4}: Применить изменения stash@{4} из копилки в рабочую директорию, НЕ удаляя ее из копилки
6. git stash pop stash@{2}: Применить изменения stash@{2} из копилки в рабочую директорию, удаляя ее из копилки
7. git stash drop stash@{0}: Удалить из копилки изменение stash@{0}
8. git stash clear: Очистить копилку полностью

Настройка глобальной конфигурации (для красивого отображения в истории Git)
1. git config --global --list: Посмотреть настройки глобальной конфиграции Git
1. git config --global user.name "Ivan Petrov": Изменить/добавить имя пользователя Ivan Petrov
2. git config --global user.email "ivan@qmail.com": Изменить/добавить e-mail пользователя ivan@gmail.com